package gm22_9.segundaEntregaFIS;

import java.util.Iterator;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : GUIUsrProfesor.java
//  @ Date : 28/05/2020
//
//



/** Interfaz CLI de Asignatura */
public class GUIUsrProfesor {
	
	private Profesor usrProfesor;
	private IGestionProfesor gestor;
	
	/**
	 * Constructor al que se le asocia una interfaz de controlador que sirva de gestor para la interfaz de usuario
	 * @param gestor instancia del controlador que le corresponde.
	 */
    public GUIUsrProfesor(IGestionProfesor gestor) {
		this.gestor = gestor;
	} 
    
    //Getters & setters
    public Profesor getUsrProfesor() {
		return usrProfesor;
	}


	public void setUsrProfesor(Profesor usrProfesor) {
		this.usrProfesor = usrProfesor;
	}


	public IGestionProfesor getGestor() {
		return gestor;
	}


	public void setGestor(IGestionProfesor gestor) {
		this.gestor = gestor;
	}

	//Metodos propios:
	
	/**
	 * Carga la vista con los datos de un profesor recibido desde el controlador.
	 * @param prof profesor a mostrar
	 */
	public void cargarVistaConDatos(Profesor prof) {
    	this.usrProfesor = prof;
    	
    	System.out.println(" ------------- VISTA PROFESOR ------------- ");
    	System.out.println("\nHola Profesor:");
    	System.out.println(String.format("%s, %s.\nEstá asociado a %d asignatura(s).\n"
    			, usrProfesor.getNombreUsuario(), usrProfesor.getApellidos(), usrProfesor.getAsignaturasAsociadas().size()));
    	
    	cargarMenu();
    }
    
	/**
	 * Carga el menu de navegacion intra interfaz que le permite al usuario acceder a las funciones de esta.
	 */
    private void cargarMenu() {
    	System.out.println(" ------------- MENÚ PROFESOR ------------- ");
    	
    	System.out.println("Seleccione qué desea hacer: ");
    	System.out.println("1- Dar alta alumno");
    	System.out.println("2- Dar alta asignatura");
    	System.out.println("3- Ver una de sus asignaturas");
    	System.out.println();
    	System.out.println("9- Cerrar la App");
    	System.out.println(" ----------------------------------------- ");
    	leerEleccion();
    }
    
    /**
     * Metodo refactorizado de cargarMenu() se encarga de leer la entrada desde la interfaz y de hacer una
     * rapida depuracion de la entrada.
     */
    private void leerEleccion() {
    	int eleccion = 0;
    	boolean seleccionRecogida = false;
    	Scanner sc = new Scanner(System.in);
    	System.out.print("Introduzca el número de la opción y presione 'Enter': ");
    	while (!seleccionRecogida) {
    		try {
    			eleccion = sc.nextInt();
    			
    			switch (eleccion) {
					case 1:
					case 2:
					case 3:
						seleccionRecogida = true;
						break;
					case 9:
						System.out.println("¡Cerrando la App!");
						System.exit(0); //CIERRA LA APP PUNTO DE SALIDA N.1
					default:
						System.out.println("ERROR! Ha introducido un número no válido, por favor seleccione un número entero entre 1 y 3 ambos incluídos.");
						seleccionRecogida = false;
						break;
				}
    		} catch (Exception e) {
    			System.out.println("ERROR! Ha introducido un caracter no válido, por favor introduzca solo el número de la opcion.");
    			seleccionRecogida = false;
    			sc.next(); // this consumes the invalid token
    		}
    	}
    	sc = null; // sc.close() genera problemas.
    	cargarEleccion(eleccion);
    }
    
    /**
     * Metodo refactorizado de leerEleccion(), en base de la eleccion introducida por el usuario en la interfaz y pre-validada por esta,
     * llama al metodo de esta interfaz que lanza la funcion seleccionada por el usuario.
     * En caso de seleccionar la opcion de matricula a un alumno, tambien le pide al usuario que introduzca el correo de ese alumno
     * y comienza rapidamente a antender su solicitud antes de pasarla al controlador de ser correcto el correo.
     * @param eleccion
     */
    private void cargarEleccion(int eleccion) {
    	switch (eleccion) {
		case 1:
			altaAlumno();
			break;
		case 2:
			altaAsignatura();
			break;
		case 3:
			cargarVistaAsignatura();
			break;


		default:
			//System.out.println("Algo raro ha pasado.. regresando al menu.");
			System.out.println("\nLa opción que ha seleccionado es correcta pero, todavia no está implementada.\n");
			cargarMenu();
			break;
		}
    }
    
	/**
	 * Funcion que le pide al usaurio que introduzca los datos del nuevo alumno para que este pueda ser dado de alta.
	 * Una vez estan recogidos los datos, se los pasa al controlador que es el que va a ejecutar realmente la accion.
	 */
    public void altaAlumno() {
    	Alumno alumno;
    	
    	String dni;
    	String nombre;
    	String apellido;
    	String correo;
    	String matricula;
    	
    	System.out.println("\n\nIMPORTANTE: por favor asegurese de que ni el DNI ni el correo ni la matrícula estén repetidos en la BBDD.\n"+
    			"Esta versión no tiene controles de esos errores implementados.\nDe no respetarse esta indiciación, se producirá un mensaje de excepción\n"+
    			"proveniente del gestor de la Base de datos, seguido por un mensaje erroneo indicando que: \"la operación fue completada\" y será reenviado"+
    			" al menú de esta vista.\nDisculpe las molestias.\n");
    	
    	Scanner sc = new Scanner(System.in);
    	System.out.print("Introduzca el DNI del Alumno: ");
    	dni = sc.nextLine();
    	System.out.print("\nIntroduzca el Nombre del Alumno: ");
    	nombre = sc.nextLine();
    	System.out.print("\nIntroduzca los Apellidos del Alumno: ");
    	apellido = sc.nextLine();
    	System.out.print("\nIntroduzca el Correo del Alumno: ");
    	correo = sc.nextLine();
    	System.out.print("\nIntroduzca la matricula del Alumno: ");
        matricula = sc.nextLine();
        sc = null;
        
	    alumno = gestor.darAltaAlumno(dni, nombre, apellido, correo, matricula);
	    if(alumno != null) System.out.print("\nEl alumno " + alumno.getNombreUsuario() + " ha sido dado de alta.");
	    else System.out.print("\nNo se ha podido dar de alta al alumno.\n");
	    
	    cargarMenu();
    }
    
    /**
	 * Funcion que le pide al usaurio que introduzca los datos de la nueva asignatura para que esta pueda ser dada de alta.
	 * Una vez estan recogidos los datos, se los pasa al controlador que es el que va a ejecutar realmente la accion.
     */
    public void altaAsignatura() {
    	
    	String nombre, abreviacion;
    	int ects;
    	
    	System.out.println("\n\nIMPORTANTE: por favor asegurese de que el nombre de la asignatura ni su abreviación estén repetidas en la BBDD.\n"+
    			"Esta versión no tiene controles de esos errores implementados.\nDe no respetarse esta indiciación, se producirá un mensaje de excepción\n"+
    			"proveniente del gestor de la Base de datos, seguido por un mensaje erroneo indicando que: \"la operación fue completada\" y será reenviado"+
    			" al menú de esta vista.\nDisculpe las molestias.\n");
    	
    	Scanner sc = new Scanner(System.in);
    	System.out.print("Introduzca el nombre de la Asignatura: ");
    	nombre = sc.nextLine();
    	System.out.print("\nIntroduzca la abreviación de la Asignatura: ");
    	abreviacion = sc.nextLine();
    	System.out.print("\nIntroduzca el número de ECTS de la asignatura (por favor sólo números enteros positivos): ");
    	try {
			ects = sc.nextInt();
			if (ects < 0 || ects > 255) {
				throw new Exception();
			}
		} catch (Exception e) {
			System.out.println("ERROR! Ha introducido un caracter no válido o un número muy grande o negativo o no entero.\n"+
					"Por defecto, se asignará que la asignatura es de 6 ECTS.");
			ects = 6;
		}
    	sc = null;
    	
    	gestor.darAltaAsignatura(nombre, abreviacion, ects, usrProfesor.getCorreo());
    	
    	System.out.println(String.format("Asignatura %s dada de alta!\n", nombre));
    	
    	cargarMenu();
    }
    
    /**
     * Una de las funciones de "pseudo-modulo de navegacion", le indica al controlador de asignaturas que cargue una vista
     * con los datos de una asignatura previamente seleccionada, en este punto se cargan las asignaturas que puede vistar
     * porque el profesor esta asociado a ellas.
     */
    public void cargarVistaAsignatura() {
    	System.out.println("\n\n");
    	Iterator<String> it = usrProfesor.getAsignaturasAsociadas().iterator();
    	String atajoAbrev[] = new String[usrProfesor.getAsignaturasAsociadas().size()];
    	
    	System.out.println(String.format("Está asociado a %d asignatura(s): ", atajoAbrev.length));
    	int i = 0;
    	while (it.hasNext()) {
    		atajoAbrev[i] = it.next();
    		//Se visualiza el numero con un offset de 1 con respecto al array para que comience la cuenta en 1 y no en 0
    		System.out.println(String.format("%d- %s", i+1, atajoAbrev[i]));
    		
    		i++;
    	}
    	cargarVistasAsigRecogerEleccion(atajoAbrev);
    }
    
    /**
     * Metodo refactorizado de cargarVistaAsignatura(), este metodo recoge la opcion seleccionada por el profesor.
     * @param atajoAbrev Conjunto de abreviaciones de las asignaturas a las que el profesor actual tiene acceso por estar asociado.
     */
    private void cargarVistasAsigRecogerEleccion(String[] atajoAbrev) { //Metodo refactorizado
    	int eleccion = -1;
    	Scanner sc = new Scanner(System.in);
    	System.out.print("Introduzca el número correspondiente a la asignatura para verla: ");
    	while (eleccion == -1) {
    		try {
    			eleccion = sc.nextInt();
    			
    			if (eleccion > 0 && eleccion <= atajoAbrev.length) {
    				eleccion -= 1; //Se quita el offset.
						
				} else {
					System.out.println(String.format("ERROR! Ha introducido un número no válido, por favor seleccione uno entre %d y %d ambos incluídos",
							0+1, atajoAbrev.length));
				}
    		} catch (Exception e) {
    			System.out.println("ERROR! Ha introducido un caracter no válido, por favor introduzca solo el número de la opcion.");
    			sc.next(); // this consumes the invalid token
    		}
    	}
    	
    	sc = null;
    	gestor.removerGUI(this); //Se desasocia la GUI para que el controlador se olvide
    	gestor.irAVistaAsignatura(atajoAbrev[eleccion]);
    }
}
