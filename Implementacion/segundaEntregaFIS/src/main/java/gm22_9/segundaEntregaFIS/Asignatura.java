package gm22_9.segundaEntregaFIS;

import java.util.HashSet;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : Asignatura.java
//  @ Date : 28/05/2020
//
//


/**
 * Clase Asignatura del Modelo
 */
public class Asignatura {
	
	private static IPersistenciaAsig persistencia = null; //La clase puede funcionar sin el componente de persistencia
	
	//Los campos que no se usan en la entrega no son reflejados

    private String nombreAsignatura;
    private String abreviatura;
    private int ects;
    private HashSet<String> profsAsociados;
    private HashSet<String> esCursadaPor;
    
    /**
     * Constructor usado para crear los objetos a partir de los datos de la BBDD.
	 * @param nombreAsignatura
	 * @param abreviatura
	 * @param ects
	 */
	public Asignatura(String nombreAsignatura, String abreviatura, int ects) {
		this.nombreAsignatura = nombreAsignatura;
		this.abreviatura = abreviatura;
		this.ects = ects;
		this.profsAsociados = new HashSet<>();
		this.esCursadaPor = new HashSet<>();
	}
    
    /**
     * Constructor para ser usado por el sistema, donde un profesor da de alta la asignatura y queda asociado.
     * @param nombre
     * @param abrev
     * @param ects
     * @param creador correo del profesor que creo la asignatura.
     */
    public Asignatura(String nombre, String abrev, int ects, String correoDelCreador) {
    	nombreAsignatura = nombre;
    	abreviatura = abrev;
    	this.ects = ects;
    	profsAsociados = new HashSet<>();
    	profsAsociados.add(correoDelCreador);
    	esCursadaPor = new HashSet<>();
    }

	//Getters & setters
	public String getNombreAsignatura() {
		return nombreAsignatura;
	}

	public void setNombreAsignatura(String nombreAsignatura) {
		this.nombreAsignatura = nombreAsignatura;
	}

	public String getAbreviatura() {
		return abreviatura;
	}

	public void setAbreviatura(String abreviatura) {
		this.abreviatura = abreviatura;
	}

	public int getEcts() {
		return ects;
	}

	public void setEcts(int ects) {
		this.ects = ects;
	}

	public HashSet<String> getProfsAsociados() {
		return profsAsociados;
	}

	public void setProfsAsociados(HashSet<String> profsAsociados) {
		this.profsAsociados = profsAsociados;
	}

	public HashSet<String> getEsCursadaPor() {
		return esCursadaPor;
	}

	public void setEsCursadaPor(HashSet<String> esCursadaPor) {
		this.esCursadaPor = esCursadaPor;
	}
	
	public static IPersistenciaAsig getPersistencia() {
		return persistencia;
	}

	public static void setPersistencia(IPersistenciaAsig persistencia) {
		Asignatura.persistencia = persistencia;
	}
	
	//funcion dar persistencia a la nueva instancia
	
	/**
	 * Invoca al gestor de persistencia para guardar la nueva instancia en la BBDD
	 * @param asig
	 */
	public static void darPersistenciaAAsignatura(Asignatura asig) {
		persistencia.create(asig);
	}
	
	/**
	 * Metodo que recupera todas las instancias de la clase actual que esten almacenadas en la BBDD
	 * y las carga a las variables globales
	 */
	public static void fecthAllInstancesFromDB() {
		VariablesGlobales.getInstance().setAsignaturas(persistencia.readAll());
	}
    
    //funciones propias
	
	/**
	 * Devuelve si un profesor esta asociado a la asignatura, no es usado ya que esta version 
	 * solo usa un profesor pre-definido en la BBDD. Implementado para reflejar mejor la trazabilidad
	 * @param correoProf
	 * @return
	 */
	public boolean profEstaAsociado(String correoProf) {
		return profsAsociados.contains(correoProf);
	}
    
	/**
	 * Devuelve si el alumno esta matriculado en la asignatura en base de su correo
	 * @param correoAl
	 * @return
	 */
	public boolean alumnoCursaAsig(String correoAl) {
		return esCursadaPor.contains(correoAl);
	}
	
	/**
	 * Este metodo permite asociar a un profesor a la asignatura, como esta version no
	 * crea nuevos profesores y solo se usa a un profesor, no se ha implementado completamente este
	 * metodo ni es usado. Fue dejado para reflejar la trazabilidad del disenio a la implementacion.
	 * @param correoProf
	 */
	public void asociarProf(String correoProf) { //Este metodo no se usara en la entraga
		if (!profEstaAsociado(correoProf)) {
			profsAsociados.add(correoProf);
		}
	}
	
	/**
	 * Matricula a un nuevo alumno a la asignatura, tambien permite la opcion de otorgar persistencia
	 * a esta matriculacion.
	 * @param correoAl
	 * @param darPersistencia Si se carga de la BBDD, darPersistencia == false;
	 */
	public void matricularAlumno(String correoAl, boolean darPersistencia) {
		if (!alumnoCursaAsig(correoAl)) {
			esCursadaPor.add(correoAl);
			if (darPersistencia) {
				persistencia.update(this.abreviatura, correoAl);
			}
		}
	}

	@Override
	public String toString() { //Para depuracion y validacion
		return "Asignatura [nombreAsignatura=" + nombreAsignatura + ", abreviatura=" + abreviatura + ", ects=" + ects
				+ ", profsAsociados=" + profsAsociados + ", esCursadaPor=" + esCursadaPor + "]";
	}
}
