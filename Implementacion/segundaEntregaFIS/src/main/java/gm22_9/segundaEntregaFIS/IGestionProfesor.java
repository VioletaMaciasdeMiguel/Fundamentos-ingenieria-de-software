package gm22_9.segundaEntregaFIS;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : IGestionProfesor.java
//  @ Date : 28/05/2020
//
//



/**
 * Interfaz del controlador de Gestion de Profesores
 */
public interface IGestionProfesor {
    /**
     * Da de alta a un alumno
     * @param dni
     * @param nombre
     * @param apellido
     * @param correo
     * @param matricula
     * @return nuevo alumno
     */
    public Alumno darAltaAlumno(String dni, String nombre, String apellido, String correo, String matricula);
    
    public Asignatura darAltaAsignatura(String nombreAsignatura, String abreviatura, int ects, String correoDelProfCreador);
    
    /**
     * Retorna a un profesor de la lista, NO ESTA IMPLEMENTADO CORRECTAMENTE EN ESTA VERSION. Siempre devuelve NULL.
     * Usar al metodo {@link #getInfoUsr(String) IGestionProfesor} .
     * @param correo
     * @return profesor encontrado
     */
    public Profesor getProf(String correo);
    
    /**
     * Este metodo pertence al controlador "CGestionUsr" pero como ese controlador no es implementado en esta version,
     * y como el controlador de profesor es el unico de los controladores gestores de cuentas que lo sera, se ha movido 
     * a este controlador por el momento.
     * @param correo del usuario
     * @return usuario
     */
    public Usuario getInfoUsr(String correo);
    
    /**
     * Agrega la GUI a la lista del controlador para que este pueda monitorearla y notificarla de ser necesario.
     * No implementado del todo en esta version.
     * @param gui
     */
    public void agregarGUI(GUIUsrProfesor gui);
    
    /**
     * Remove la GUI a la lista del controlador para que este se olvide de monitorearla y notificarla.
     * No implementado del todo en esta version.
     * @param gui
     */
    public void removerGUI(GUIUsrProfesor gui);
    
    public void cargarVista(Profesor Prof);
    
    /**
     * Inyecta la dependencia del modulo de navegacion al controlador. En esta version por razones explicadas en el comentario
     * del main en App.java, se usar√° directamente el controlador de asignaturas.
     * @param navegacion modulo encargado de la navegacion
     */
    public void inyectarModuloNavegacion(IAsignatura navegacion);
    
    /**
     * Funcion del pseudo-modulo de navegacion de la version actual. En la version completa esta funcion no pertence a esta clase.
     * Leer el comentario en el main() de App.java
     * @param abreviacionAsig
     */
    public void irAVistaAsignatura(String abreviacionAsig);
}
