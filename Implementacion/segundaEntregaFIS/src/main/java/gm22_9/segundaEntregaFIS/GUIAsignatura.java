package gm22_9.segundaEntregaFIS;

import java.util.Iterator;
import java.util.Scanner;


//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : GUIAsignatura.java
//  @ Date : 28/05/2020
//
//



/** Interfaz CLI de Asignatura */
public class GUIAsignatura {
	
	private IAsignatura controlador;
	private IGestionProfesor sustitutoControladorUsuarios; //Tambien es sustituto del modulo de navegacion
	private Asignatura asignaturaTratada;
	
	
	/**
	 * Constructor al que se le asocia una interfaz de controlador que sirva de gestor para la interfaz de usuario
	 * @param controlador instancia del controlador que le corresponde.
	 * @param sustitutoControladorUsuarios Tambien sustituye las funciones de modulo de navegacion en esta version
	 */
	public GUIAsignatura(IAsignatura controlador, IGestionProfesor sustitutoControladorUsuarios) {
		this.controlador = controlador;
		this.sustitutoControladorUsuarios = sustitutoControladorUsuarios;
	}

	//Getters & Setters
	
    public IAsignatura getControaldor() {
		return controlador;
	}

	public void setControaldor(IAsignatura controlador) {
		this.controlador = controlador;
	}

	public Asignatura getAsignaturaTratada() {
		return asignaturaTratada;
	}

	public void setAsignaturaTratada(Asignatura asignaturaTratada) {
		this.asignaturaTratada = asignaturaTratada;
	}

	/**
	 * Carga la vista con los datos de una asignatura recibida desde el controlador.
	 * @param asig Asignatura a mostrar
	 */
    public void cargarVistaConDatos(Asignatura asig) {
    	asignaturaTratada = asig;
    	
    	System.out.println(" ------------- VISTA ASIGNATURA ------------- ");
    	System.out.println("\nSe ha cargado la asignatura:");
    	System.out.println(String.format("%s (%s), de %d ECTS, con %d alumno(s) matriculado(s).\n"
    			, asignaturaTratada.getNombreAsignatura(), asignaturaTratada.getAbreviatura(), asignaturaTratada.getEcts(), asignaturaTratada.getEsCursadaPor().size()));
    	
    	cargarMenu();
    }
    
    /**
     * Carga el menu de navegacion intra interfaz que le permite al usuario acceder a las funciones de esta.
     */
    private void cargarMenu() {
    	System.out.println(" ------------- MENÚ ASIGNATURA ------------- ");
    	
    	System.out.println("Seleccione qué desea hacer: ");
    	System.out.println("1- Listar alumnos matriculados");
    	System.out.println("2- Matricular nuevo alumno");
    	System.out.println("3- Volver al menú de profesor");
    	System.out.println();
    	System.out.println("9- Cerrar la App");
    	System.out.println(" ------------------------------------------ ");
    	leerEleccion();
    }
    
    /**
     * Metodo refactorizado de cargarMenu() se encarga de leer la entrada desde la interfaz y de hacer una
     * rapida depuracion de la entrada.
     */
    private void leerEleccion() {
    	int eleccion = 0;
    	boolean seleccionRecogida = false;
    	Scanner sc = new Scanner(System.in);
    	System.out.print("Introduzca el número de la opción y presione 'Enter': ");
    	while (!seleccionRecogida) {
    		try {
    			eleccion = sc.nextInt();
    			
    			switch (eleccion) {
				case 1:
				case 2:
				case 3:
					seleccionRecogida = true;
					break;
				case 9:
					System.out.println("¡Cerrando la App!");
					System.exit(0); //CIERRA LA APP PUNTO DE SALIDA N.2
				default:
					System.out.println("ERROR! Ha introducido un número no válido, por favor seleccione un número entero entre 1 y 3 ambos incluídos.");
					seleccionRecogida = false;
					break;
				}
    		} catch (Exception e) {
    			System.out.println("ERROR! Ha introducido un caracter no válido, por favor introduzca solo el número de la opcion.");
    			seleccionRecogida = false;
    			sc.next(); // this consumes the invalid token
    		}
    	}
    	sc = null; // sc.close() genera problemas.
    	cargarEleccion(eleccion);
    }
    
    /**
     * Metodo refactorizado de leerEleccion(), en base de la eleccion introducida por el usuario en la interfaz y pre-validada por esta,
     * llama al metodo de esta interfaz que lanza la funcion seleccionada por el usuario.
     * En caso de seleccionar la opcion de matricula a un alumno, tambien le pide al usuario que introduzca el correo de ese alumno
     * y comienza rapidamente a antender su solicitud antes de pasarla al controlador de ser correcto el correo.
     * De solicitar la opcion de volver a la vista de profesor, se usan las funciones del "pseudo-modulo de navegacion"
     * @param eleccion
     */
    private void cargarEleccion(int eleccion) {
    	switch (eleccion) {
		case 1:
			mostrarAlumnosMatriculados();
			break;
			
		case 2:
			System.out.print("\n\n"+"Introduzca el correo del alumno que quiere matricular: ");
			Scanner sc = new Scanner(System.in);
			String correo = sc.next();
			sc = null; //Tentativa de reemplazar sc.close() que genera problemas.
			if (!asignaturaTratada.getEsCursadaPor().contains(correo)) {
				Alumno al = (Alumno)sustitutoControladorUsuarios.getInfoUsr(correo);
				if (al == null) {
					System.out.println("No existe una alumno registrado con el correo '"+correo+"'.\n"+
							"Si desea matricularlo, por favor vuelva al menú de profesor, dele de alta y vuelva intentarlo.");
					cargarMenu();
				} else {
					matricularAlumno(al);
				}
			} else {
				System.out.println("El alumno con el correo: "+correo+"; ya está matriculado.\nRegresando al menú.");
				cargarMenu();
			}
			break;
			
		case 3:
			controlador.removerGUI(this); //Se le indica al controlador que ya no se usara esta vista y que se olvide de esta.
			//La siguiente linea es una solucion temporal para que se regrese a la vista original, la del unico profesor en la BBDD
			Profesor tmp = (Profesor)sustitutoControladorUsuarios.getInfoUsr(asignaturaTratada.getProfsAsociados().iterator().next());
			sustitutoControladorUsuarios.cargarVista(tmp);
			break;

		default:
			//System.out.println("Algo raro ha pasado.. regresando al menu.");
			System.out.println("\nLa opción que ha seleccionado es correcta pero, todavia no está implementada.\n");
			cargarMenu();
			break;
		}
    }
    
    /**
     * Funcion que muestra un listado de los alumnos matriculados en la asignatura
     */
    private void mostrarAlumnosMatriculados() {
    	System.out.println("\n\n");
    	if (asignaturaTratada.getEsCursadaPor().size() == 0) {
    		System.out.println("Esta asignatura no tiene alumnos matriculados.");
    	} else {
    		
    		Iterator<String> it = asignaturaTratada.getEsCursadaPor().iterator();
    		System.out.println("Esta asignatura tiene: "+asignaturaTratada.getEsCursadaPor().size()+" alumno(s) matriculado(s):");
    		int i = 1;
    		while (it.hasNext()) {
    			Alumno al = (Alumno)sustitutoControladorUsuarios.getInfoUsr(it.next()); //Es seguro que el alumno existe en este punto, de lo contrario pasa algo raro.
    			System.out.println(String.format("%d- %s, %s; Correo: %s; Matricula: %s.",
    					i, al.getNombreUsuario(), al.getApellidos(), al.getCorreo(), al.getMatricula()));
    			i++;
    		}
    		System.out.println("\n\n");
    	}
    	cargarMenu();
    }
    
    /**
     * Despues de recoger el correo y de asegurarse que el correo pertenece a un alumno previamente dado de alta, este metodo le pasa 
     * la invocacion al controlador para llevar a cabo el proceso de matriculacion.
     * @param nuevo Alumno confirmado de existir dentro de la app
     */
    public void matricularAlumno(Alumno nuevo) {
    	controlador.matricularAlumno(asignaturaTratada.getAbreviatura(), nuevo);
    	System.out.println("EXITO! Se ha matriculado correctamente al alumno con correo: "+nuevo.getCorreo()+" a la asignatura.");
    	System.out.println(String.format("Ahora hay %d alumno(s) matriculado(s).\nRegresando al menú.", asignaturaTratada.getEsCursadaPor().size()));
    	cargarMenu();
    }
}
