package gm22_9.segundaEntregaFIS;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

import java.sql.Statement;
import java.sql.ResultSet;

/*
 * Documentancion del JDBC:
 * https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-examples.html
 * https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-usagenotes-connect-drivermanager.html#connector-j-examples-connection-drivermanager
 * https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-usagenotes-statements.html#connector-j-examples-execute-select
 */

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : ConectorBBDD.java
//  @ Date : 28/05/2020
//
//

/**
 * Clase que hara la conexicon con la BBDD MySQL
 * Los datos de conexion deben ser modificados para que apunten a la base de datos de verdad.
 * Por defecto, estan registrados los datos de la BBDD usada para produccion
 * @author luism
 *
 */
public class ConectorBBDD implements IConectorBBDD {

    private static ConectorBBDD instanciaUnica = null;

    private String nombreUsr;
    private String passw;
    private String nombreBBDD;
    private String ipConPuertoBBDD;

    private Connection conexion = null;




    /**
     * Constructor privado que inicia las variables del conector.
     * Ahora estan cargados los datos de la BBDD del ordenador de produccion.
     */
	private ConectorBBDD() {
		//Script de creacion esta en: ~/.git/gm22_9_califyme/Implementacion/segundaEntregaFIS/src/ScriptCreadorDeBD.sql

		///////////////////////////////////////////////////////////////////////////
		//MODIFICAR AQUI ABAJO LOS DATOS DE LA CONEXION CON LA BBDD MySQL ////////
		/////////////////////////////////////////////////////////////////////////

		this.nombreUsr = "luis";
		this.passw =  "abc123.";
		this.nombreBBDD = "fisSegundaEntrega";
		this.ipConPuertoBBDD = "192.168.2.239:3306";
	}

	/**
	 * Devuelve la instancia unica de la clase Singleton
	 * @return instancia unica
	 */
	public static IConectorBBDD getInstancia() {
    	if (instanciaUnica == null) {
    		instanciaUnica = new ConectorBBDD();
    	}
    	return instanciaUnica;
    }

    /**
     * Metodo encargado de establecer la conexion
     */
    private void establecerConexion() {
    	if (!conexionAbierta()) {
    		try {
    		    conexion =
    		       DriverManager.getConnection(
    		    		   String.format("jdbc:mysql://%s/%s?user=%s&password=%s", ipConPuertoBBDD, nombreBBDD, nombreUsr, passw)
    		    		   +"&useJDBCCompliantTimezoneShift=true&serverTimezone=UTC"
                   );
    		} catch (SQLException ex) {
    		    // handle any errors
    		    System.out.println("SQLException: " + ex.getMessage());
    		    //System.out.println("SQLState: " + ex.getSQLState());
    		    //System.out.println("VendorError: " + ex.getErrorCode());
    		}
    	}
    }

    @Override
    public ResultSet ejecutarBusqueda(String sql) {
    	Statement stmt = null;
    	ResultSet rs = null;
    	establecerConexion(); //Se intenta establecer conexion si no esta abierta.
    	if (conexionAbierta()) { //Se comprueba que la conexion este abierta antes de intentar ejecutar comandos.
    		try {
        		stmt = conexion.createStatement();
    		    rs = stmt.executeQuery(sql);
    		}
    		catch (SQLException ex){
    		    System.out.println("SQLException: " + ex.getMessage());
    		    //System.out.println("SQLState: " + ex.getSQLState());
    		    //System.out.println("VendorError: " + ex.getErrorCode());
    		}
    		finally {
    		    if (stmt != null) {
    		        /*try {
    		            stmt.close();
    		        } catch (SQLException sqlEx) { } // ignore*/
    		        stmt = null; //Tentativa de reemplazo a stmt.close() que genera problemas
    		    }
    		}
    	} else {
    		System.out.println("No hay conexion con la BBDDD, no se ejecuta la sentencia");
    	}
    	return rs;
    }

    @Override
    public void ejecutarOperacion(String sql) {
    	Statement stmt = null;
    	establecerConexion(); //Se intenta establecer conexion si no esta abierta.
    	if (conexionAbierta()) { //Se comprueba que la conexion este abierta antes de intentar ejecutar comandos.
    		try {
        		stmt = conexion.createStatement();
    		    stmt.executeUpdate(sql);
    		}
    		catch (SQLException ex){
    			/*System.out.println(sql);
    			ex.printStackTrace();*/
    		    System.out.println("SQLException: " + ex.getMessage());
    		    //System.out.println("SQLState: " + ex.getSQLState());
    		    //System.out.println("VendorError: " + ex.getErrorCode());
    		}
    		finally {
    		    if (stmt != null) {
    		        /*try {
    		            stmt.close();
    		        } catch (SQLException sqlEx) { } // ignore*/
    		        stmt = null;
    		    }
    		}
    	} else {
    		System.out.println("No hay conexion con la BBDDD, no se ejecuta la sentencia");
    	}
    }

    /**
     * Devuelve true si la conexion esta abierta
     * @return
     */
    public boolean conexionAbierta() {
    	return conexion != null;
    }

    /**
     * SOLO PARA DEBUG
     * @param reSet
     * @throws SQLException
     */
    @SuppressWarnings("unused")
	private static void iterateResultSet(ResultSet reSet) throws SQLException {
		System.out.println("\n\nImprimiendo resultado:\n");
		StringBuilder builder;
		while (reSet.next()) {
			builder = new StringBuilder("");
			builder.append("Nombre Alumno: "+reSet.getString("nombre")+" ");
			builder.append("cursa: "+reSet.getString("asignatura")+" ");
			builder.append("de: "+reSet.getString("ects")+" creditos.");
			System.out.println(builder.toString());
		}
	}
}
