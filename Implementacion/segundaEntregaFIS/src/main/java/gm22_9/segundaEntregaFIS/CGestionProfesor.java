package gm22_9.segundaEntregaFIS;

import java.util.ArrayList;
import java.util.Hashtable;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : gm22_9_califyMe
//  @ File Name : CGestionProfesor.java
//  @ Date : 28/05/2020
//
//



/** Controlador de Profesores y en esta version, pseudo-modulo de navegacion*/
public class CGestionProfesor implements IGestionProfesor {

    private static CGestionProfesor instanciaUnica;
    //Esta instancia esta aqui para permitir la navegacion entre controladores, en la version completa hara referencia a un modulo que gestione la navegacion entre controladores.
    private static IAsignatura siguienteControlador;
    private ArrayList<GUIUsrProfesor> guis;
    private VariablesGlobales var;
    
    //La siguente variable "gestiona" no sera usada en la version entregable, solo esta para mostrar la trazabilidad entre el disenio y la implementacion
    private Hashtable<String, Profesor> gestiona;
    
    
    
    /**
	 * Constructor privado de Singleton
	 */
	private CGestionProfesor() {
		guis = new ArrayList<GUIUsrProfesor>();
		var = VariablesGlobales.getInstance();
		gestiona = new Hashtable<String, Profesor>();
	}

	@Override
    public Alumno darAltaAlumno(String dni, String nombre, String apellido, String correo, String matricula) {
    	Alumno nuevoAl = null;
    	if (Profesor.esCorreoETSISI(correo)) {
			nuevoAl = new Alumno(dni, nombre, apellido, correo, matricula);
			var.getUsuarios().put(nuevoAl.getCorreo(), nuevoAl); //Se actualiza la variable global
			Usuario.getPersistencia().create(nuevoAl); //El metodo create distingue entre Alumnos y profesores y lo escribira en la tabla apropiada.
    	} else {
    		System.out.println(String.format("El correo: %s no pertence a la ETSISI", correo));
    	}
    	return nuevoAl;
    }
    
    @Override
    public Profesor getProf(String correo) { //Metodo semi-implementado para reflejar trazabilidad entre disenio e implmentacion.
    	Profesor result = null;
    	if (gestiona.containsKey(correo)) {
    		result = gestiona.get(correo);
    	}
    	System.out.println("El metodo getProf(String correo) no esta implementado del todo en esta version, SIEMPRE DEVUELVE NULL.");
    	return result;
    }
    
    /**
     * Devuelve la instancia unica del controlador
     * @return
     */
    public static CGestionProfesor getInstancia() {
    	if (instanciaUnica == null) {
    		instanciaUnica = new CGestionProfesor();
    	}
    	return instanciaUnica;
    }
    
    @Override
    public void agregarGUI(GUIUsrProfesor gui) {
    	guis.add(gui);
    }
    
    @Override
    public void removerGUI(GUIUsrProfesor gui) {
    	guis.remove(gui);
    }

	@Override
	public Usuario getInfoUsr(String correo) { //Leer JavaDoc de la Interfaz
		Usuario result = null;
		if (var.getUsuarios().containsKey(correo)) {
			result = var.getUsuarios().get(correo);
		}
		return result;
	}

	@Override
	public void cargarVista(Profesor prof) {
		GUIUsrProfesor gui = new GUIUsrProfesor(instanciaUnica);
		this.agregarGUI(gui);
		gui.cargarVistaConDatos(prof);
	}

	@Override
	public void inyectarModuloNavegacion(IAsignatura navegacion) {
		siguienteControlador = navegacion;
	}

	@Override
	public void irAVistaAsignatura(String abreviacionAsig) {
		siguienteControlador.cargarVista(abreviacionAsig, this);
	}

	@Override
	public Asignatura darAltaAsignatura(String nombreAsignatura, String abreviatura, int ects, String correoDelProfCreador) {
		Asignatura asig = new Asignatura(nombreAsignatura, abreviatura, ects, correoDelProfCreador);
		var.getAsignaturas().put(asig.getAbreviatura(), asig); //Se actualiza la variable global
		((Profesor)this.getInfoUsr(correoDelProfCreador)).asociarAsig(abreviatura); //Se asocia internamente al profesor con la asignatura.
		Asignatura.getPersistencia().create(asig); //Se da persistencia a la nueva asignatura
		return asig;
	}
	
	
}
